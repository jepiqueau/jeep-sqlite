/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AllConnectionsOptions, ConnectionOptions, EchoOptions, EchoResult, HTTPRequestEndedListener, JsonProgressListener, PickOrSaveDatabaseEndedListener, SQLiteChanges, SQLiteExecuteOptions, SQLiteExportOptions, SQLiteFromAssetsOptions, SQLiteHTTPOptions, SQLiteImportOptions, SQLiteJson, SQLiteLocalDiskOptions, SQLiteOptions, SQLiteQueryOptions, SQLiteResult, SQLiteRunOptions, SQLiteSet, SQLiteSetOptions, SQLiteSyncDate, SQLiteSyncDateOptions, SQLiteTableOptions, SQLiteUpgradeOptions, SQLiteValues, SQLiteVersion, SQLiteVersionUpgrade } from "./interfaces/interfaces";
export { AllConnectionsOptions, ConnectionOptions, EchoOptions, EchoResult, HTTPRequestEndedListener, JsonProgressListener, PickOrSaveDatabaseEndedListener, SQLiteChanges, SQLiteExecuteOptions, SQLiteExportOptions, SQLiteFromAssetsOptions, SQLiteHTTPOptions, SQLiteImportOptions, SQLiteJson, SQLiteLocalDiskOptions, SQLiteOptions, SQLiteQueryOptions, SQLiteResult, SQLiteRunOptions, SQLiteSet, SQLiteSetOptions, SQLiteSyncDate, SQLiteSyncDateOptions, SQLiteTableOptions, SQLiteUpgradeOptions, SQLiteValues, SQLiteVersion, SQLiteVersionUpgrade } from "./interfaces/interfaces";
export namespace Components {
    interface JeepSqlite {
        "addUpgradeStatement": (options: SQLiteUpgradeOptions) => Promise<void>;
        /**
          * AutoSave
         */
        "autoSave": boolean;
        "beginTransaction": (options: SQLiteOptions) => Promise<SQLiteChanges>;
        /**
          * Button Options
         */
        "buttonOptions": string;
        "checkConnectionsConsistency": (options: AllConnectionsOptions) => Promise<SQLiteResult>;
        "close": (options: SQLiteOptions) => Promise<void>;
        "closeConnection": (options: SQLiteOptions) => Promise<void>;
        "commitTransaction": (options: SQLiteOptions) => Promise<SQLiteChanges>;
        "copyFromAssets": (options: SQLiteFromAssetsOptions) => Promise<void>;
        "createConnection": (options: ConnectionOptions) => Promise<void>;
        "createSyncTable": (options: SQLiteOptions) => Promise<SQLiteChanges>;
        "deleteDatabase": (options: SQLiteOptions) => Promise<void>;
        "deleteExportedRows": (options: SQLiteOptions) => Promise<void>;
        "echo": (options: EchoOptions) => Promise<EchoResult>;
        "execute": (options: SQLiteExecuteOptions) => Promise<SQLiteChanges>;
        "executeSet": (options: SQLiteSetOptions) => Promise<SQLiteChanges>;
        "exportToJson": (options: SQLiteExportOptions) => Promise<SQLiteJson>;
        "getDatabaseList": () => Promise<SQLiteValues>;
        "getFromHTTPRequest": (options: SQLiteHTTPOptions) => Promise<void>;
        "getFromLocalDiskToStore": (options: SQLiteLocalDiskOptions) => Promise<void>;
        "getSyncDate": (options: SQLiteSyncDateOptions) => Promise<SQLiteSyncDate>;
        "getTableList": (options: SQLiteOptions) => Promise<SQLiteValues>;
        "getVersion": (options: SQLiteOptions) => Promise<SQLiteVersion>;
        "importFromJson": (options: SQLiteImportOptions) => Promise<SQLiteChanges>;
        "isConnection": (options: SQLiteOptions) => Promise<SQLiteResult>;
        "isDBExists": (options: SQLiteOptions) => Promise<SQLiteResult>;
        "isDBOpen": (options: SQLiteOptions) => Promise<SQLiteResult>;
        "isDatabase": (options: SQLiteOptions) => Promise<SQLiteResult>;
        "isJsonValid": (options: SQLiteImportOptions) => Promise<SQLiteResult>;
        "isStoreOpen": () => Promise<boolean>;
        "isTableExists": (options: SQLiteTableOptions) => Promise<SQLiteResult>;
        "isTransactionActive": (options: SQLiteOptions) => Promise<SQLiteResult>;
        "open": (options: SQLiteOptions) => Promise<void>;
        /**
          * Pick Button Text
         */
        "pickText": string;
        "query": (options: SQLiteQueryOptions) => Promise<SQLiteValues>;
        "rollbackTransaction": (options: SQLiteOptions) => Promise<SQLiteChanges>;
        "run": (options: SQLiteRunOptions) => Promise<SQLiteChanges>;
        /**
          * Save Button Text
         */
        "saveText": string;
        "saveToLocalDisk": (options: SQLiteOptions) => Promise<void>;
        "saveToStore": (options: SQLiteOptions) => Promise<void>;
        "setSyncDate": (options: SQLiteSyncDateOptions) => Promise<void>;
        /**
          * in use with TypeOrm
         */
        "typeOrm": boolean;
        /**
          * WasmPath
         */
        "wasmPath": string;
    }
}
export interface JeepSqliteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJeepSqliteElement;
}
declare global {
    interface HTMLJeepSqliteElement extends Components.JeepSqlite, HTMLStencilElement {
    }
    var HTMLJeepSqliteElement: {
        prototype: HTMLJeepSqliteElement;
        new (): HTMLJeepSqliteElement;
    };
    interface HTMLElementTagNameMap {
        "jeep-sqlite": HTMLJeepSqliteElement;
    }
}
declare namespace LocalJSX {
    interface JeepSqlite {
        /**
          * AutoSave
         */
        "autoSave"?: boolean;
        /**
          * Button Options
         */
        "buttonOptions"?: string;
        "onJeepSqliteExportProgress"?: (event: JeepSqliteCustomEvent<JsonProgressListener>) => void;
        "onJeepSqliteHTTPRequestEnded"?: (event: JeepSqliteCustomEvent<HTTPRequestEndedListener>) => void;
        "onJeepSqliteImportProgress"?: (event: JeepSqliteCustomEvent<JsonProgressListener>) => void;
        "onJeepSqlitePickDatabaseEnded"?: (event: JeepSqliteCustomEvent<PickOrSaveDatabaseEndedListener>) => void;
        "onJeepSqliteSaveDatabaseToDisk"?: (event: JeepSqliteCustomEvent<PickOrSaveDatabaseEndedListener>) => void;
        /**
          * Pick Button Text
         */
        "pickText"?: string;
        /**
          * Save Button Text
         */
        "saveText"?: string;
        /**
          * in use with TypeOrm
         */
        "typeOrm"?: boolean;
        /**
          * WasmPath
         */
        "wasmPath"?: string;
    }
    interface IntrinsicElements {
        "jeep-sqlite": JeepSqlite;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "jeep-sqlite": LocalJSX.JeepSqlite & JSXBase.HTMLAttributes<HTMLJeepSqliteElement>;
        }
    }
}
